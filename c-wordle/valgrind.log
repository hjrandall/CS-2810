==22432== Memcheck, a memory error detector
==22432== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==22432== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==22432== Command: ./a.out
==22432== Parent PID: 22430
==22432== 
==22432== Use of uninitialised value of size 8
==22432==    at 0x484B460: strcpy (in /usr/lib/aarch64-linux-gnu/valgrind/vgpreload_memcheck-arm64-linux.so)
==22432==    by 0x108C2F: read_word_list (wordlist.c:31)
==22432==    by 0x1089BB: main (main.c:5)
==22432== 
==22432== Invalid write of size 1
==22432==    at 0x484B460: strcpy (in /usr/lib/aarch64-linux-gnu/valgrind/vgpreload_memcheck-arm64-linux.so)
==22432==    by 0x108C2F: read_word_list (wordlist.c:31)
==22432==    by 0x1089BB: main (main.c:5)
==22432==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==22432== 
==22432== 
==22432== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==22432==  Access not within mapped region at address 0x0
==22432==    at 0x484B460: strcpy (in /usr/lib/aarch64-linux-gnu/valgrind/vgpreload_memcheck-arm64-linux.so)
==22432==    by 0x108C2F: read_word_list (wordlist.c:31)
==22432==    by 0x1089BB: main (main.c:5)
==22432==  If you believe this happened as a result of a stack
==22432==  overflow in your program's main thread (unlikely but
==22432==  possible), you can try to increase the size of the
==22432==  main thread stack using the --main-stacksize= flag.
==22432==  The main thread stack size used in this run was 8388608.

valgrind: m_coredump/coredump-elf.c:495 (fill_fpu): Assertion 'Unimplemented functionality' failed.
valgrind: valgrind

host stacktrace:
==22432==    at 0x58046570: ??? (in /usr/lib/aarch64-linux-gnu/valgrind/memcheck-arm64-linux)
==22432==    by 0x580466B3: ??? (in /usr/lib/aarch64-linux-gnu/valgrind/memcheck-arm64-linux)
==22432==    by 0x5804680B: ??? (in /usr/lib/aarch64-linux-gnu/valgrind/memcheck-arm64-linux)
==22432==    by 0x5807A3EF: ??? (in /usr/lib/aarch64-linux-gnu/valgrind/memcheck-arm64-linux)
==22432==    by 0x5807A623: ??? (in /usr/lib/aarch64-linux-gnu/valgrind/memcheck-arm64-linux)
==22432==    by 0x5805956B: ??? (in /usr/lib/aarch64-linux-gnu/valgrind/memcheck-arm64-linux)
==22432==    by 0x5805A79F: ??? (in /usr/lib/aarch64-linux-gnu/valgrind/memcheck-arm64-linux)
==22432==    by 0x58057A47: ??? (in /usr/lib/aarch64-linux-gnu/valgrind/memcheck-arm64-linux)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 22432)
==22432==    at 0x484B460: strcpy (in /usr/lib/aarch64-linux-gnu/valgrind/vgpreload_memcheck-arm64-linux.so)
==22432==    by 0x108C2F: read_word_list (wordlist.c:31)
==22432==    by 0x1089BB: main (main.c:5)
client stack range: [0x1FFEFFE000 0x1FFF000FFF] client SP: 0x1FFF000400
valgrind stack range: [0x1002BB8000 0x1002CB7FFF] top usage: 19056 of 1048576


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

